-content_for('turolinks-cache') { 'no-cache' }

= form_for(word, local: true, class: 'needs-validation', novalidate: true) do |f|
  - if word.errors.any?
    .alert.alert-danger.alert-dismissible.fade.show role="alert"
      button.btn-close type="button" data-bs-dismiss="alert" aria-label="Close"
      h5.alert-heading
        = pluralize(word.errors.count, "error")
        |  prohibited this word from being saved:
      ul.mb-0
        - word.errors.full_messages.each do |message|
          li = message

  .px-0
    .row
      .col-12
        - unless template_list.empty?
          .mb-3
            = label_tag :template, "Template", class: 'form-label'
            = select_tag :template, options_for_select(template_list), {id: 'template-selector', class: 'form-select', include_blank: 'Choose a template...' }
            .form-text Select a template to start with predefined content.

        .mb-3
          = f.label :title, class: 'form-label'
          = f.text_field :title, class: 'form-control form-control-lg', placeholder: 'Enter the title for your word', required: true
          .invalid-feedback Please provide a title.

        - if word.persisted?
          .mb-3
            = button_tag type: 'button', class: 'btn btn-outline-primary', id: 'ai-edit-btn', data: { word_id: word.id } do
              | 🤖 AIエディット
            = button_tag type: 'button', class: 'btn btn-outline-secondary btn-sm ms-2', id: 'test-api-btn' do
              | テスト
            .form-text Generate content using AI based on the word title. Click "テスト" to check API connection.

javascript:
  document.addEventListener('DOMContentLoaded', function() {
    const aiEditBtn = document.getElementById('ai-edit-btn');
    const testApiBtn = document.getElementById('test-api-btn');
    
    if (testApiBtn) {
      testApiBtn.addEventListener('click', function() {
        const wordId = aiEditBtn ? aiEditBtn.dataset.wordId : 1;
        
        const originalText = this.innerHTML;
        this.disabled = true;
        this.innerHTML = '🔄 テスト中...';
        
        fetch(`/${wordId}/ai_edit`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
          }
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            showMessage('API接続テスト成功！', 'success');
          } else {
            showMessage(`API接続エラー: ${data.error}`, 'error');
          }
        })
        .catch(error => {
          console.error('Error:', error);
          showMessage('ネットワークエラーが発生しました', 'error');
        })
        .finally(() => {
          this.disabled = false;
          this.innerHTML = originalText;
        });
      });
    }
    
    if (aiEditBtn) {
      aiEditBtn.addEventListener('click', function() {
        const wordId = this.dataset.wordId;
        const trixEditor = document.querySelector('trix-editor');
        
        if (!trixEditor) {
          alert('エディターが見つかりません');
          return;
        }
        
        // ボタンを無効化してローディング状態にする
        const originalText = this.innerHTML;
        this.disabled = true;
        this.innerHTML = '🔄 生成中...';
        
        // Ajax リクエストを送信
        fetch(`/${wordId}/ai_edit`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
          }
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            // Trixエディターにコンテンツを設定
            trixEditor.editor.setDocument(Trix.Document.fromString(data.content));
            
            // 成功メッセージを表示
            showMessage('AIによるコンテンツ生成が完了しました', 'success');
          } else {
            // エラーメッセージを表示
            showMessage(`エラー: ${data.error}`, 'error');
          }
        })
        .catch(error => {
          console.error('Error:', error);
          showMessage('ネットワークエラーが発生しました', 'error');
        })
        .finally(() => {
          // ボタンを元の状態に戻す
          this.disabled = false;
          this.innerHTML = originalText;
        });
      });
    }
    
    // メッセージ表示用のヘルパー関数
    function showMessage(message, type) {
      // 既存のメッセージがあれば削除
      const existingMessage = document.querySelector('.ai-edit-message');
      if (existingMessage) {
        existingMessage.remove();
      }
      
      // 新しいメッセージを作成
      const messageDiv = document.createElement('div');
      messageDiv.className = `alert alert-${type === 'success' ? 'success' : 'danger'} alert-dismissible fade show ai-edit-message`;
      messageDiv.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
      `;
      
      // フォームの上部に挿入
      const form = document.querySelector('form');
      if (form) {
        form.insertAdjacentElement('beforebegin', messageDiv);
        
        // 3秒後に自動的に削除
        setTimeout(() => {
          if (messageDiv && messageDiv.parentNode) {
            messageDiv.remove();
          }
        }, 3000);
      }
    }
  });

        .mb-3
          = f.label :tag_list, "Tags", class: 'form-label'
          = f.text_field :tag_list, value: word.tag_list.to_s, class: 'form-control', placeholder: 'Add tags separated by commas'
          .form-text Use tags to categorize and organize your content.

        .mb-4
          = f.label :body, "Content", class: 'form-label'
          = f.rich_text_area :body, class: 'form-control rich-text-editor'
          .form-text Use the toolbar above to format your content with rich text.

        .d-flex.gap-2.justify-content-end.align-items-center
          = link_to 'Cancel', words_path, class: 'btn btn-outline-secondary'
          - if word.persisted? && word.id != 1
            = link_to 'Delete', word, method: :delete, data: { turbo_method: :delete, turbo_confirm: 'Are you sure you want to delete this word? This action cannot be undone.' }, class: 'btn btn-danger'
          = f.submit word.persisted? ? 'Update Word' : 'Create Word', class: 'btn btn-primary px-4'
